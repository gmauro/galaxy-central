<tool id="get_flanks1" name="Get flanks">
  <description>returns flanking region/s for every gene</description>
  <command interpreter="python2.4">get_flanks.py $input $out_file1 $size $direction -l $input_chromCol,$input_startCol,$input_endCol,$input_strandCol</command>
  <inputs>
    <param format="interval" name="input" type="data" label="Select data"/>
    <param name="size" size="10" type="integer" value="50" label="Length of the flanking region/s"/>
    <param name="direction" type="select" label="Location of the flanking region/s">
      <option value="Upstream">Upstream</option>
      <option value="Downstream">Downstream</option>
      <option value="Both">Both</option>
    </param>
    
  </inputs>
  <outputs>
    <data format="input" name="out_file1" metadata_source="input"/>
  </outputs>
  <tests>
    <test>
      <param name="input" value="flanks_inp.bed"/>
      <param name="size" value="50"/>
      <param name="direction" value="Upstream"/>
      <output name="out_file1" file="flanks_out.bed"/>
    </test>
  </tests>
 <help> 
.. class:: infomark

**TIP:** Every line should contain at least 3 columns: Chromosome number, Start and Stop co-ordinates. If any of these columns is missing or if start and stop co-ordinates are not numerical, the tool may encounter exceptions and such lines are skipped as invalid. The number of invalid skipped lines is documented in the resulting history item as a "Data issue".

.. class:: infomark

**TIP:** If your data is not TAB delimited, use *Edit Queries-&gt;Convert characters*

-----


**Example**

- This tool finds the upstream and/or downstream flanking region/s of all the genes in the input file.

- For the following query::

   chr7 100   600  gene1 0 +
   chr7 200  1000  gene2 0 -

- running **get flanks** with **flank length 50** and **location upstream** will return::

   chr7 50   100  gene1 0 +
   chr7 1000  1050  gene2 0 -



</help>  


</tool>