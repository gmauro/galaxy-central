<tool id="rgTF" name="Tool Factory" version="0.05">
  <description>Makes scripts into tools</description>
  <command interpreter="python">
#if ( $__user_email__ not in ['ross.lazarus@gmail.com'] ):
     rgToolFactory.py --bad_user $__user_email__
  #else:
    rgToolFactory.py --script_path "$runme" --interpreter "$interpreter" 
     --tool_name "$tool_name"  
    #if $make_TAB.value=="yes":
       --output_tab "$tab_file"
    #end if
    #if $factory.make_Tool=="yes":
      --make_Tool "$factory.make_Tool"
      --help_text "$helpme"
      --tool_desc "$factory.tool_desc"
      --new_tool "$new_tool"
    #end if
    #if $make_HTML.value=="yes":
      --output_dir "$html_file.files_path" --output_html "$html_file"
    #end if
    #if len($inputs) > 0:
        #for $fname in $inputs:
        --input_list "'${fname.inputf}','${fname.inputf.name}'"
        #end for
    #end if
    #if $make_HTML.value=="yes":
       --make_HTML "yes"
    #end if
#end if 
  </command>
  <inputs>
    <repeat name="inputs" title="Input files to pass as command line parameters to your script - select none, one or more - see docs below" 
         optional="true"
         help="Your script must parse these paths from the first CL parameter as list of strings (or 'None') 'path1,'path2',... ">
        <param name="inputf" type="data" label="Input file from your history" size="100" optional = "true"/>
    </repeat>
    <param name="tool_name" type="text" value="MyPastedScript" size="80" 
       label="Title for outputs (and the generated tool). Choose a short, informative name for your script and the future tool"
       help="Only lower letters and numbers are permitted for tool names - all other characters will be removed">
        <sanitizer>
            <valid initial="string.letters,string.digits">
                <mapping initial="none"/>
            </valid>
        </sanitizer>
    </param>
    <conditional name="factory">
        <param name="make_Tool" type="select" label="Create a tar.gz file ready for local toolshed entry" help="Ready to deploy securely!">
        <option value="yes">Yes</option>
        <option value="" selected="true">Not yet, it's still broken</option>
        </param>
        <when value = "yes">
            <param name="tool_desc" type="text" width="120" value="" help="Supply a brief tool description for the Galaxy tool menu entry (optional - appears after the tool name)" />
            <param name="help_text" type="text" area="true" size="8x80" width="120" value="**What it Does**" help="Supply the brief user documentation to appear on the new tool form as reStructured text" >           
                <sanitizer>
                    <valid initial="string.printable">
                    </valid>
                    <mapping initial="none"/>
                </sanitizer>
            </param>
        </when>
    </conditional> 
    <param name="make_HTML" type="select" label="Create an HTML report with links to all output files and thumbnail links to PDF images" 
         help="Recommended for presenting complex outputs in an accessible manner">
        <option value="yes">Yes</option>
        <option value="" selected="true">No</option>
    </param>   
    <param name="make_TAB" type="select" label="Create a new tabular history output" 
         help="This is useful if your script creates a single new tabular file you want to appear in the history after the tool executes">
        <option value="yes" selected="true">Yes</option>
        <option value="">No</option>
    </param>   
    <param name="interpreter" type="select" label="Select the interpreter for your code. This must be available on the path of the execution host">
        <option value="Rscript" selected="true">Rscript</option>
        <option value="python">python</option>
        <option value="perl (ugh)">perl</option>
    </param>   
    <param name="dynScript" label="Cut and paste the script to be executed here - see help below on parameters" 
      type="text" value="" area="True" size="8x80" width="80" 
      help="Script will get 3 parameters: List of input file paths (or 'None'), output tabular history file path (or 'None') and list of input file names (or 'None')">
      <sanitizer>
         <valid initial="string.printable">
         </valid>
         <mapping initial="none"/>
      </sanitizer>
     </param>
  </inputs>
  <outputs>
    <data format="tabular" name="tab_file" label="${tool_name}.xls">
        <filter>make_TAB == "yes"</filter>
    </data>
    <data format="html" name="html_file" label="${tool_name}.html">
        <filter>make_HTML == "yes"</filter>
    </data>
    <data format="gz" name="new_tool" label="${tool_name}_tool.gz">
        <filter>factory['make_Tool'] == "yes"</filter>
    </data>
  </outputs>
<configfiles>
<configfile name="runme">
${dynScript}
</configfile>

<configfile name="helpme">
#if $factory.make_Tool == "yes":
${factory.help_text}
#end if
</configfile>
</configfiles>
<help>
**What it does** This tool enables a user to paste and submit an arbitrary R/python/perl script to Galaxy.

.. class:: warningmark

**Note to system administrators** This tool offers *NO* built in protection against pasting malicious scripts so should only be installed on 
private/personnal Galaxy instances. Generated tools run normally and are safe if the script they contain is safe - always check before installing! 

**Script input options** The script will recieve 3 command line parameters which it must deal with. Each will be 'None' if not applicable.
The first is a comma delimited list of paths to the user supplied input files - eg "foo.dat,bar.dat" - the script is entirely responsible for
making sense of these - see examples below
The second is the path to the optional output file or 'None'
The third is a comma delimited list of user supplied input file names from the Galaxy history - eg "Myfirstfile.xls,MySecondfile.xls" which may be useful for 
output annotation such as column headers in results - but the script MUST do all the relevant work to use these.

**Output options** Optional script outputs include one single new history tabular file, or for scripts that create multiple outputs,
a new HTML report linking all the files and images created by the script can be automatically generated.

**Tool Generation option** Once the script is working with test data, this tool will optionally generate a new Galaxy tool in a gzip file
ready to upload to your local toolshed for sharing and installation.

**Scripting conventions** The pasted script will be executed with the path to the (optional) input tabular data file path or NONE if you do not select one, and the path to the optional
output file or None if none is wanted, as the first and second command line parameters. The script must deal appropriately with these - see Rscript examples below.
Note that if an optional HTML output is selected, all the output files created by the script will be nicely presented as links, with pdf images linked as thumbnails in that output.
This can be handy for complex scripts creating lots of output.

**Simple examples**

A simple Rscript "filter" showing how the command line parameters can be handled that takes an input file, 
does something (transpose in this case) and writes the results to a new tabular file::

 # transpose a tabular input file and write as a tabular output file
 ourargs = commandArgs(TRUE)
 inf = strsplit(ourargs[1],',')
 outf = ourargs[2]
 inp = read.table(inf[1],head=F,row.names=NULL,sep='\t')
 outp = t(inp)
 write.table(outp,outf, quote=FALSE, sep="\t",row.names=F,col.names=F)

A more complex Rscript example takes no input file but generates a random heatmap pdf - you must make sure the option to create an HTML output file is
turned on for this to work. The heatmap will be presented as a thumbnail linked to the pdf in the resulting HTML page::

 # note this script takes NO input or output because it generates random data
 foo = data.frame(a=runif(100),b=runif(100),c=runif(100),d=runif(100),e=runif(100),f=runif(100))
 bar = as.matrix(foo)
 pdf( "heattest.pdf" )
 heatmap(bar,main='Random Heatmap')
 dev.off()

A Python example with some simple error checking illustrating the Python code that you might need to extract the first input file path from the first
command line parameter (ignoring any others if there). The code reverses each row of a tabular file. Yes, you can do this already
in Galaxy using the cut tool, but this trivial example will deal correctly with any arbitrary number of columns in one fell swoop :: 

 # REMOVE all leading spaces if cut and pasted into the script box or you will throw a Python syntax error
 # also remember to set the interpreter to Python - Rscript won't run this code
 # reverse order of columns in a tabular file
 import sys
 inp = sys.argv[1].split(',')[0]
 outp = sys.argv[2]
 assert inp != 'None', 'Please rerun after selecting a tabular input file'
 assert outp != 'None', "Please rerun after changing the 'Create a new tabular history output' option to Yes"
 i = open(inp,'r')
 o = open(outp,'w')
 for row in i:
      rs = row.rstrip().split('\t')
      rs.reverse()
      o.write('\t'.join(rs))
      o.write('\n')
 i.close()
 o.close()

**Permission to to use this tool** must be explicitly granted by an administrator adding approved Galaxy user IDs to the local tool XML list of permitted users.  *It will not run otherwise*

The tools generated by this tool will run just as securely as any other normal installed Galaxy tool but like any other new tools, should always be checked carefully before installation.

.. class:: warningmark

**Use on public servers**  is STRONGLY discouraged for obvious reasons
 

**Attribution** Copyright Ross Lazarus (ross period lazarus at gmail period com) May 2012

All rights reserved.

Licensed under the LGPL_

.. _LGPL: http://www.gnu.org/copyleft/lesser.html

</help>

</tool>


