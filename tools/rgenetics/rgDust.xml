<tool id="rgDust" name="Report/Filter low complexity sequences" version="0.1">
   <command interpreter="python"> 
    rgDust.py --input "$input" --informat "$input.ext" --score "$score" --report "$reportOut" --seqlen "$seqlen"
#if str($cleanme)=='true'
--output "$output" --reject "$rejectout"
#end if
    </command>
  <inputs>
    <param format="fasta,sam,bam" name="input" type="data" label="Short read (bam,sam,fasta) from your current history" />
    <param name="score" label="Complexity score cutoff for filtering output (if requested)"
    type="integer" value="200"/>
    <param name="seqlen" label="Sequence length to score - eg 36 for 36bp short reads"
    help="Longer sequences will be split into subsequences and the mean score used for filtering" type="integer" value="36"/>
    <param name="cleanme" value="false" type="boolean" label="Create a filtered new output file containing only reads with a complexity score below the cutoff"
      truevalue="true" falsevalue="false" checked="no"  />
  </inputs>
  <outputs>
    <data format="tabular" name="reportOut" label="${on_string}_dustcount.xls" />
    <data format="bam" name="output"  label="${on_string}_dust_${score}.${input.ext}" metadata_source="input">
    <change_format> <when input="input.ext" value="collapsedfasta" format="fasta"/> </change_format>
    <change_format> <when input="input.ext" value="fasta" format="fasta"/> </change_format>
    <change_format> <when input="input.ext" value="sam" format="sam" /> </change_format>
    <filter>cleanme is True</filter>
    </data>  
   <data format="bam" name="rejectout"  label="${on_string}_dust_reject_${score}.${input.ext}" metadata_source="input">
    <change_format> <when input="input.ext" value="fasta" format="fasta"/> </change_format>
    <change_format> <when input="input.ext" value="collapsedfasta" format="fasta"/> </change_format>
    <change_format> <when input="input.ext" value="sam" format="sam" /> </change_format>
    <filter>cleanme is True</filter>
  </data>  
  </outputs>
  <help>

**Warning**

----

**What this tool does**

Report complexity and optionally filter out low complexity sequences.

----

**How it works**

This tool will report the distribution of 'Dust' type complexity in sequence data. 

Unlike the Dust program used for BLAST filtering, no sliding window is used.

Each sequence is converted into all possible successive trinucleotides - like open reading frames. All resulting trinucleotides are counted.
Complexity is defined as the presence of many distinct trinucleotides, so low counts of any one of the possible 4^3 (64) possible trinucleotides.

A homopolymer has many counts of one trinucleotide (eg AAA). When that count is squared, it gives a very high range score whereas a highly diverse sequence can get a score of zero.

The method takes each sequence and counts unique trinucleotides into a vector of all possible trinucleotide counts.

The score is the sum of squared (count - 1) for all counted trinucleotides so can't be higher than 1086 for 36nt sequences. 
See the BioC mailing list posts in the python source code.

If sequences longer than seqlen are encountered, they are split and counted as seqlen subsequences

----

**Attribution**

rgDust was written by Ross Lazarus based on some ideas posted to BioC by Herve Pages and is licensed under the LGPL_ like other rgenetics artefacts

.. _LGPL: http://www.gnu.org/copyleft/lesser.html

  </help>

</tool>


