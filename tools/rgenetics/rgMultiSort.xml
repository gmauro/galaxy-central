<tool id="rgMultiSort1" name="Multiple sort">
  <description>for tabular data</description>
   <code file="rgfakePhe_code.py"/> 
   <command interpreter="python2.4">rgMultiSort.py $i.extra_files_path/$i.metadata.base_name
   '$title1' $out_file1 $out_file1.extra_files_path/$i.metadata.base_name $script_file
   </command>
   <inputs>
    <page>
    <param name="i"
         type="data" format="tabular"
         label="Tabular input file"/>
    <param name="title1" type="text" 
         value="My Multiple Sortgasm" size="60"
         label="Title for outputs"/>   
       <param name="dbkey" label="Genome" type="select" dynamic_options="get_available_builds('hg18')" />      </page>
    <page>
    <repeat name="Sorts" title="Column and sort settings">
        <param name="Name" type="text" label="Column Name">
        </param>
      <conditional name="Sort">
        <param name="Column" type="integer" label="Column number" dynamic_options="get_tabcolumn()" />
        <param name="Direction" type="select" label="Sort direction">
          <option value="a" selected="true">Start smallest to largest</option>
          <option value="d">Start largest down to smallest</option>
        </param>
        <param name="Collation" type="select" label="Sort collation">
          <option value="n" selected="true">General numeric</option>
          <option value="f">For consistent numeric formats</option>
          <option value="a">Alphanumeric</option>
        </param>
      </conditional>
    </repeat>
    </page>       
</inputs>
<configfiles>
<configfile name="script_file">
sortslist = [
#for $n, $s in enumerate($Sorts)
{'Name':$n,'Column':$s.Column,'Direction':$s.Direction,'Collation':$s.Collation}
#end for
]

</configfile>
</configfiles>

 <outputs>
    <data format="pphe" metadata_source="i" name="out_file1" />
  </outputs>      

<help>
.. class:: infomark

This tool allows you to generate an arbitrary combination of subsorts. You may specify any
or any number of columns as sort keys, with separate settings (direction, collation) for each.
The overall sort key will be constructed exactly as specified so you can easily sort on power descending
and then p value ascending so within each power the smallest p values will appear. Probably need a binning
function to make this more useful.

-----

.. class:: warningmark

This tool is very experimental

-----

- **Pedigree** is a library pedigree file - the id's will be used in the synthetic null phenotypes
- **Title** is a name to give to the output phenotype file

On the next page, you can add an unlimited number of various kinds of phenotypes including choices for
categorical ones or distributions with specific parameters

Just keep adding new ones until you're done then use the Execute button to run the generation 

**Attribution**
Originally designed and written for the Rgenetics
series of Galaxy tools by Dan Blankenberg and modified
copyright Ross Lazarus 2007 (ross.lazarus@gmail.com)
Licensed under the terms of the LGPL
as documented http://www.gnu.org/licenses/lgpl.html

</help>
</tool>
