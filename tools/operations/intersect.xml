<tool id="Intersect1" name="Intersect">
  <description>return overlapping segments of two Queries</description>
  <command>galaxyOps3 $dbkey -chromCol=$input1_chromCol -startCol=$input1_startCol -stopCol=$input1_endCol -strandCol=$input1_strandCol -chromCol2=$input2_chromCol -startCol2=$input2_startCol -stopCol2=$input2_endCol $input1 $input2 -chrom=all -minSize=$min -bed=$out_file1</command>
  <inputs>
    <param format="interval" name="input1" type="data">
      <label>Return subregions of Query1</label>
    </param>
    <param format="interval" name="input2" type="data" help="Queries missing? See TIP below">
      <label>that intersect regions of Query2</label>
    </param>
    <param name="min" size="4" type="integer" value="1">
      <label>Where overlap is at least</label>
    </param>
   </inputs>
  <outputs>
    <data format="bed" name="out_file1" />
  </outputs>
  <code file="operation_filter.py"/>
  <test>
	<inputs>
		<param name="input1" file="1.bed"/>
		<param name="input2" file="2.bed"/>
		<param name="min" value="1" />
	</inputs>
	<outputs>
		<data name="out_file1" file="op-intersect.bed"/>
	</outputs>
  </test>
  <help>

.. class:: warningmark

Both Queries must be from the same genome build.

.. class:: infomark

**TIP:** If your query does not appear in the pulldown menu -> it is not in interval format. Use "edit attributes" to set chromosome, start, end, and strand columns

-----

**Syntax**

This tool finds regions that overlap between the given queries.

- **Where overlap is at least** sets the minimum length (in base bairs) of overlap between elements of the two queries

-----

**Image illustration**

.. image:: ../static/operation_icons/intersect.png  

-----

**Example**

- Query1::

    chr7	127475281	127475310	NM_000230	0	+
    chr7	127486011	127486166	D49487	0	+

- Query2::

    chr7	127470000	127480000
    chr11	27488016	37486164

- Intersect Query1 and Query2::

    chr7	127475281	127475310

</help>
</tool>
