<tool id="Join1" name="Join">
  <description>two Queries side by side</description>
  <command>galaxyOps3 $dbkey -chromCol=$input1_chromCol -startCol=$input1_startCol -stopCol=$input1_endCol -strandCol=$input1_strandCol -chromCol2=$input2_chromCol -startCol2=$input2_startCol -stopCol2=$input2_endCol $input1 $input2 -join -chrom=all -minSize=$min -bed=$out_file1</command>
  <inputs>
    <param format="interval" name="input1" type="data">
      <label>Join Query1</label>
    </param>
    <param format="interval" name="input2" type="data" help="Queries missing? See TIP below">
      <label>With Query2</label>
    </param>
    <param name="min" size="4" type="integer" value="1">
      <label>Where overlap &gt;=</label>
    </param>
  </inputs>
  <outputs>
    <data format="input" name="out_file1" metadata_source="input1" />
  </outputs>
  <code file="operation_filter.py"/>
  <help>

.. class:: warningmark

Both Queries must be from the same genome build.

.. class:: infomark

**TIP:** If your query does not appear in the pulldown menu -> it is not in interval format. Use "edit attributes" to set chromosome, start, end, and strand columns

-----

**Syntax**

This tool is similar to the operation known in the relational algebra of database systems as a "natural join". Two queries are matched up by region, and the result is a wider table with the data columns from the first query followed by the data columns from the second one. Only rows that match are included in the result.

- **Where overlap** sets the minimum intersect (in bp) between a region of Query1 and a region of Query2 that allows them to be joined

-----

**Example**

- Query 1::

   chr1 10   100  Query1.1
   chr1 500  1000 Query1.2
   chr1 1100 1250 Query1.3

- Query 2::

   chr1 20   80   Query2.1
   chr1 2000 2204 Query2.2
   chr1 2500 3000 Query2.3

- Join Query1 with Query2::

   chr1 10 100 Query1.1 20 80 Query2.1

</help>
</tool>
