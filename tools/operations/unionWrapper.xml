<tool id="Union2" name="Union">
  <description>compute union between Queries</description>
  <command interpreter="perl">unionWrapper.pl $input1 $input2 $input1_chromCol $input1_startCol $input1_endCol $input1_strandCol $input2_chromCol $input2_startCol $input2_endCol $input2_strandCol $dbkey $out_file1</command>
  <inputs>
    <param format="interval" name="input1" type="data">
      <label>Compute union between Query1</label>
    </param>
    <param format="interval" name="input2" type="data" help="Queries missing? See TIP below">
      <label>and Query2</label>
    </param>
  </inputs>
  <outputs>
    <data format="input" name="out_file1" metadata_source="input1"/>
  </outputs>
  <code file="operation_filter.py"/>
  <help>

.. class:: warningmark

Both Queries must be from the same genome build.

.. class:: infomark

**TIP:** If your query does not appear in the pulldown menu -> it is not in interval format. Use "edit attributes" to set chromosome, start, end, and strand columns

-----

**Syntax**

Collects all regions that appear in any of the given queries. 

- This tool returns original regions from the given queries.

-----

**Image illustration**

.. image:: ../static/operation_icons/union.png

-----

**Example**

- Query1::

    chr7	117400000	127500000

- Query2::

    chr7	127475281	127475310	NM_000230	0	+
    chr7	127486011	127486166	D49487	0	+

- Union of Query1 and Query2::

    chr7	117400000	127500000
    chr7	127475281	127475310	NM_000230	0	+
    chr7	127486011	127486166	D49487	0	+

</help>
</tool>
