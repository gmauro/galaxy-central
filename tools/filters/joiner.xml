<tool id="join1" name="Join two Queries">
  <description>side by side on a specified field</description>
  <command interpreter="perl">joinWrapper.pl $input1 $input2 $field1 $field2 "N" "N" $out_file1</command>
  <inputs>
      <param name="field1" size="2" type="integer" value="1" label="Join field" />
      <param format="tabular" name="input1" type="data" label="of Query1"/>
      <param name="field2" size="2" type="integer" value="1" label="with field"/>
      <param format="tabular" name="input2" type="data" label="of Query2"/>
  </inputs>
  <outputs>
     <data format="input" name="out_file1" metadata_source="input1" />
  </outputs>
  <tests>
    <test>
      <param name="input1" value="1.bed"/>
      <param name="input2" value="2.bed"/>
      <param name="field1" value="2"/>
      <param name="field2" value="2"/>
      <output name="out_file1" file="fs-joiner.dat"/>
    </test>
  </tests>
  <help>

.. class:: warningmark

**This tool may break column assignments.** To re-establish column assignments click on "edit attributes" link of the history item generated by this tool.

.. class:: infomark

**TIP:** If your data is not TAB delimited, use *Edit Queries-&gt;Convert characters*

-----

**Syntax**

This tool joins lines of two queries on a common field, which is similarly to unix join command and SQL join operation. 

- Columns are referenced with a **number**. For example, **3** refers to the 3rd column of a tab-delimited file.

-----

**Example**

Query1::

  chr1 10 20 geneA 
  chr1 50 80 geneB
  chr5 10 40 geneL

Query2::

  geneA tumor-supressor
  geneB Foxp2
  geneC Gnas1
  geneE INK4a

Joining the 4th column of Query1 with the 1st column of Query2 will yield::

  geneA chr1 10 20 tumor-supressor
  geneB chr1 50 80 Foxp2


</help>
</tool>
