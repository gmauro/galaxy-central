<tool id="ncbi_blastn_wrapper" name="NCBI BLAST+ blastn" version="0.0.1">
    <description>Search nucleotide database with nucleotide query sequence(s)</description>
    <command>
## The command is a Cheetah template which allows some Python based syntax.
## Lines starting hash hash are comments. Galaxy will turn newlines into spaces
blastn
-query "$query"
#if $db_opts.db_opts_selector == "db":
  -db "$db_opts.database"
#else:
  -subject "$db_opts.subject"
#end if
-task $blast_type
-evalue $evalue_cutoff
$adv_opts.filter_query
$adv_opts.strand
-out $output1
$out_format
-num_threads 8
## Need int(str(...)) because $adv_opts.max_hits is an InputValueWrapper object not a string
## Note -max_target_seqs overrides -num_descriptions and -num_alignments
#if (str($adv_opts.max_hits) and int(str($adv_opts.max_hits)) > 0):
-max_target_seqs $adv_opts.max_hits
#end if
#if (str($adv_opts.word_size) and int(str($adv_opts.word_size)) > 0):
-word_size $adv_opts.word_size
#end if
$adv_opts.ungapped
    </command>
    <inputs>
        <param name="query" type="data" format="fasta" label="Nucleotide query sequence(s)"/> 
        <conditional name="db_opts">
            <param name="db_opts_selector" type="select" label="Subject database/sequences">
              <option value="db" selected="True">BLAST Database</option>
              <option value="file">FASTA file</option>
            </param>
            <when value="db">
                <param name="database" type="select" label="Nucleotide BLAST database">
                    <options from_file="blastdb.loc">
                      <column name="name" index="0"/>
                      <column name="value" index="1"/>
                    </options>
                </param>
                <param name="subject" type="hidden" value="" /> 
            </when>
            <when value="file">
                <param name="database" type="hidden" value="" /> 
                <param name="subject" type="data" format="fasta" label="Nucleotide FASTA file to use as database"/> 
            </when>
        </conditional>
        <param name="blast_type" type="select" display="radio" label="Type of BLAST">
            <option value="megablast">megablast</option>
            <option value="blastn">blastn</option>
            <option value="blastn-short">blastn-short</option>
            <option value="dc-megablast">dc-megablast</option>
            <!-- Using BLAST 2.2.24+ this gives an error:
            BLAST engine error: Program type 'vecscreen' not supported
            <option value="vecscreen">vecscreen</option>
            -->
        </param>
        <param name="evalue_cutoff" type="float" size="15" value="0.001" label="set expectation value cutoff" />
        <param name="out_format" type="select" label="Output format">
            <option value="-outfmt 6" selected="True">Tabular</option>
            <option value="-outfmt 5">BLAST XML</option>
            <option value="-outfmt 0">Pairwise text</option>
            <option value="-outfmt 0 -html">Pairwise HTML</option>
            <option value="-outfmt 2">Query-anchored text</option>
            <option value="-outfmt 2 -html">Query-anchored HTML</option>
            <option value="-outfmt 4">Flat query-anchored text</option>
            <option value="-outfmt 4 -html">Flat query-anchored HTML</option>
            <!--
            <option value="-outfmt 11">BLAST archive format (ASN.1)</option>
            -->
        </param>
        <conditional name="adv_opts">
            <param name="adv_opts_selector" type="select" label="Advanced Options">
              <option value="basic" selected="True">Hide Advanced Options</option>
              <option value="advanced">Show Advanced Options</option>
            </param>
            <when value="basic">
                <param name="filter_query" type="hidden" value="" />
                <param name="strand" type="hidden" value="" />
                <param name="max_hits" type="hidden" value="" />
                <param name="word_size" type="hidden" value="" />
                <param name="ungapped" type="hidden" value="" />
            </when>
            <when value="advanced">
                <!-- Could use a select (yes, no, other) where other allows setting 'level window linker' -->
                <param name="filter_query" type="boolean" label="Filter out low complexity regions (with DUST)" truevalue="-dust yes" falsevalue="-dust no" checked="true" />
                <param name="strand" type="select" label="Query strand(s) to search against database/subject">
                    <option value="-strand both">Both</option>
                    <option value="-strand plus">Plus (forward)</option>
                    <option value="-strand minus">Minus (reverse complement)</option>
                </param>
                <!-- Why doesn't optional override a validator? I want to accept an empty string OR a non-negative integer -->
                <param name="max_hits" type="integer" value="0" label="Maximum hits to show" help="Use zero for default limits">
                    <validator type="in_range" min="0" />
                </param>
                <!-- I'd like word_size to be optional, with minimum 4 for blastn -->
                <param name="word_size" type="integer" value="0" label="Word size for wordfinder algorithm" help="Use zero for default, otherwise minimum 4.">
                    <validator type="in_range" min="0" />
                </param>
                <param name="ungapped" type="boolean" label="Perform ungapped alignment only?" truevalue="-ungapped" falsevalue="" checked="false" />
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="output1" format="tabular" label="${blast_type.value_label} on ${db_opts.db_opts_selector}">
            <change_format>
                <when input="out_format" value="-outfmt 0" format="txt"/>
                <when input="out_format" value="-outfmt 0 -html" format="html"/>
                <when input="out_format" value="-outfmt 2" format="txt"/>
                <when input="out_format" value="-outfmt 2 -html" format="html"/>
                <when input="out_format" value="-outfmt 4" format="txt"/>
                <when input="out_format" value="-outfmt 4 -html" format="html"/>
                <when input="out_format" value="-outfmt 5" format="blastxml"/>
            </change_format>
        </data>
    </outputs>
    <requirements>
        <requirement type="binary">blastn</requirement>
    </requirements>
    <tests>
        <test>
            <param name="input_query" value="megablast_wrapper_test1.fa" ftype="fasta"/>
            <!-- database needs to match the entry in the blastdb.loc file (first column), which includes the last update date if appropriate --> 
            <param name="database" value="phiX" />
            <param name="blast_type" value="megablast" />
            <!--
            <param name="word_size" value="28" />
            <param name="iden_cutoff" value="99.0" />
            -->
            <param name="evalue_cutoff" value="10.0" />
            <param name="filter_query" value="yes" />
            <param name="out_format" value="6" />
            <output name="output1" file="megablast_wrapper_test1.out"/> 
        </test>
    </tests>
    <help>
    
.. class:: warningmark

**Note**. Database searches may take substantial amount of time.
For large input datasets it is advisable to allow overnight processing.  

-----

**What it does**

Search a *nucleotide database* using a *nucleotide query*,
using the NCBI BLAST+ blastn command line tool.
Algorithms include blastn, megablast, and discontiguous megablast.

-----

**Output format**

Because Galaxy focuses on processing tabular data, the default output of this tool is tabular. This contains 12 columns:

1. Id of your sequence 
2. GI of the database hit 
3. % identity
4. Alignment length
5. # mismatches
6. # gaps
7. Start position in your sequence
8. End position in your sequence
9. Start position in database hit
10. End position in database hit
11. E-value
12. Bit score

The second option is BLAST XML output, which is designed to be parsed by another program, and is understood by other Galaxy tools.

You can also choose several plain text or HTML output formats which are designed to be read by a person (not by another program).
The HTML versions use basic webpage formatting and can include links to the hits on the NCBI website.
The pairwise output (the default on the NCBI BLAST website) shows each match as a pairwise alignment with the query.
The two query anchored outputs show a multiple sequence alignment between the query and all the matches,
and differ in how insertions are shown (marked as insertions or with gap characters added to the other sequences).

-------

**References**

Zhang et al. A Greedy Algorithm for Aligning DNA Sequences. 2000. JCB: 203-214.

    </help>
</tool>
